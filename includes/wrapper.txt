<?php
/* generated by LinkVulcano.com for #website_name# */
class LinkVulcano {
	
	private $token ;
	private $api_url;
	private $cache_file;
	private $cache_timeout;
	private $debug;
	
	public function __construct() {
		$this->token = '#token#'; //don't change
		$this->api_url = '#api_url#'; // don't change
		$this->cache_file = '#cache_file#'; //you can change this path
		$this->cache_timeout = 3600*4; //in seconds
		$this->debug = array();
	}
	
	//force retriever from server (called from server)
	public function forceRetrieveServer($token) {
		if($token == $this->token) { $this->getLinksFromAPI(1); }
	}
	
	//check install (called from server)
	public function checkInstall($token) {
		file_put_contents($this->cache_file,'');
		if(file_exists($this->cache_file)) {
			if(is_writable($this->cache_file)) {
				return'true';
			}
			else {
				return'Writing permission error! Check file permission for '.$this->cache_file.'';
			}
		}
		else {
			return'Cache file cannot be created! You must create in root a file called '.$this->cache_file.' and set write permission.';
		}
	}
	
	//make request to server or get from cache
	private function getLinksFromAPI($force=0) {
		//check if is neccessary to connect to server or read from cache
		$cache = ($force == 0) ? $this->readCache() : false;
		if($cache) {
			//return from cache
			return $cache;
		}
		else {
			//make request to server
			$ch = curl_init();
			curl_setopt($ch, CURLOPT_URL, $this->api_url.'?op=getLinks&token='.$this->token);
			curl_setopt($ch, CURLOPT_HEADER, 0);
			curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
			curl_setopt($ch, CURLOPT_TIMEOUT, 10); //how much seconds can wait response from server
			$output = curl_exec($ch);
			curl_close($ch);
			
			if($output) {
				//write cache file
				$this->writeCache($output);
				
				//return from server
				return $output;
			}
			else {
				$this->debug[] = 'Connecting to server failed';
				return false;
			}
	
		}
	}
	
	//read cache file
	private function readCache() {
		if(file_exists($this->cache_file)) {
			if((time()-$this->cache_timeout < filemtime($this->cache_file))) {
				return file_get_contents($this->cache_file);
			}
			else {
				return false;
			}
		}
		else {
			$this->debug[] = 'Read cache failed! Cache file really exists?';
			return false;
		}
	}
	
	
	//wrote cache file
	private function writeCache($content) {
		if(file_exists($this->cache_file)) {
			if(is_writable($this->cache_file)) {
				file_put_contents($this->cache_file,$content);
			}
			else {
				chmod($this->cache_file, 0777);
				$this->writeCache($content);
			}
		}
		else {
			file_put_contents($this->cache_file,$content);
			chmod($this->cache_file, 0777);
		}
	}
	
	//get links for viewing
	public function getLinks($slot_slug,$return_type="array") { //object / html
		$links = $this->getLinksFromAPI();
		if($links) {
			$links_arr = json_decode($links,0);
			$return = '';
			foreach($links_arr AS $slot=>$links) {
				if($slot == $slot_slug) {
				
					if($return_type == "object") {
						$return = $links;
					}
					elseif($return_type == "html") {
						$return='<ul>';
						foreach($links AS $key=>$link) {

							$nofollow = ($link->nofollow == 1) ? ' rel="nofollow"' : '';
							$return.='<li><a href="'.$link->url.'" title="'.$link->anchor.'" target="'.$link->target.'"'.$nofollow.'>'.$link->anchor.'</a></li>';
						}
						$return.='</ul>';
					}
					return $return;
					break;
				}
			}
			
			if($return == "") {
				$this->debug[] = 'No links to show!';
			}
		}
		else {
			$this->debug[] = 'No links to show!';
			return false;
		}
	}
	
	//view debug messages
	public function debug() {
		echo'<pre>';
		print_r($this->debug);
		echo'</pre>';
	}
	
}

//calls from server
$op = @$_GET['op'];
$token = @$_GET['token'];
if($op == "update") { $op = new LinkVulcano(); $op->forceRetrieveServer($token); }
elseif($op == "check") { $op = new LinkVulcano(); echo $op->checkInstall($token); }
?>